#BlueJ class context
comment0.target=MarksAnalyser
comment0.text=\n\ MarksAnalyser\ stores\ a\ collection\ of\ Student\ records.\n\ Complete\ the\ code\ missing\ from\ methods\ below\ for\ practice\n\ at\ using\ ArrayList\ and\ for-each\ loops.\n\ \n\ @author\ (your\ name)\ \n\ @version\ (a\ version\ number\ or\ a\ date)\n
comment1.params=
comment1.target=MarksAnalyser()
comment1.text=\n\ Create\ an\ empty\ courselist\n
comment10.params=
comment10.target=java.lang.String\ printHistogram()
comment10.text=\ \n\ CHALLENGE\:\ only\ attempt\ this\ method\ after\ all\ of\ the\ other\ work\ and\ if\ you\ are\ confident.\ \n\ Generate\ a\ histogram\ of\ marks\ in\ courselist\ using\ strings\ of\ asterisks.\ \n\ Assume\ marks\ are\ in\ 0-100,\ so\ group\ marks\ into\ 00..19,\ 20..39,\ ...,\ 80..100.\ \n\ @result\ String\ with\ each\ bin\ represented\ by\ limits\ and\ *s,\ e.g.\ 00..19\ \:\ ***\ \n
comment2.params=student
comment2.target=void\ joinClass(Student)
comment2.text=\n\ Add\ the\ provided\ student\ record\ to\ the\ end\ of\ the\ class\ list.\n\ @param\ member\ The\ Student\ object\ to\ be\ added.\n
comment3.params=
comment3.target=int\ numberOfStudents()
comment3.text=\n\ @return\ the\ number\ of\ students\ in\ the\ class\ list.\n
comment4.params=
comment4.target=java.lang.String\ showCourseNames()
comment4.text=\n\ Generate\ a\ class\ list\ of\ student\ names\ (only)\ in\ a\ string,\ \n\ with\ a\ newline\ (\\n)\ after\ each\ student.\n\ @return\ String\ list\ of\ names\ separated\ by\ newlines\n
comment5.params=
comment5.target=java.lang.String\ showCourse()
comment5.text=\n\ Generate\ a\ class\ list\ of\ comma-separated\ student\ names\ and\ marks\ in\ a\ string,\ \n\ with\ a\ newline\ (\\n)\ after\ each\ student.\n\ @return\ String\ list\ of\ names\ and\ marks\ separated\ by\ commas\ and\ newlines\n
comment6.params=name
comment6.target=Student\ findStudent(java.lang.String)
comment6.text=\n\ Get\ a\ specific\ Student\ object\ record\ from\ the\ class\ list\n\ @param\ String\ name\ of\ the\ student\ in\ the\ class\ list\n\ @return\ Student\ object\ if\ the\ name\ is\ present\ or\ \n\ null\ if\ the\ name\ does\ not\ appear\ in\ the\ class\ list\n
comment7.params=
comment7.target=int\ maximum()
comment7.text=\n\ Find\ the\ maximum\ mark,\ ignoring\ the\ student\ name.\n\ @return\ int\ the\ largest\ mark\ in\ courselist.\n
comment8.params=
comment8.target=double\ average()
comment8.text=\n\ Find\ the\ average\ mark\ for\ the\ class\ list.\n\ @return\ double\ average\ value\n
comment9.params=threshold
comment9.target=java.util.ArrayList\ starStudents(int)
comment9.text=\n\ Find\ all\ students\ with\ a\ mark\ of\ threshold\ or\ above.\n\ @param\ int\ threshold\ only\ Students\ with\ a\ mark\ of\ at\ least\ threshold\ are\ returned\n\ @return\ ArrayList\ of\ all\ Students\ who\ meet\ the\ cut\ off\n
numComments=11
