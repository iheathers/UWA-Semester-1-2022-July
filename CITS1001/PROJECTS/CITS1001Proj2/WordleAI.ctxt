#BlueJ class context
comment0.target=WordleAI
comment0.text=\n\ This\ class\ contains\ static\ methods\ that\ play\ Wordle\ using\ a\ simple\ artificial\ intelligence.\n\n\ @author\ 23771397\ (Pritam\ Suwal\ Shrestha)\ AND\ 23728208\ (Trieu\ Huynh)\n
comment1.params=
comment1.target=WordleAI()
comment2.params=guess\ c
comment2.target=boolean\ guessContains(java.lang.String,\ char)
comment2.text=\n\ Returns\ true\ if\ guess\ contains\ the\ letter\ c\ and\ false\ otherwise.\n
comment3.params=previousGuess\ result\ newGuess
comment3.target=boolean\ isConsistent(java.lang.String,\ java.lang.String,\ java.lang.String)
comment3.text=\n\ Returns\ true\ if\ newGuess\ is\ consistent\ with\ a\ previousGuess\ and\ its\ result\n\ and\ false\ otherwise.\n\ \n\ The\ parameter\ previousGuess\ is\ a\ previous\ Wordle\ guess\ made\ by\ the\ AI.\n\ The\ parameter\ result\ is\ the\ result\ of\ the\ guessWord\ method\ in\ WordleGame.\n\ The\ parameter\ newGuess\ is\ a\ potential\ new\ word\ to\ guess.\n\ \n\ A\ newGuess\ is\ consistent\ with\ the\ previousGuess\ and\ result\ if\ they\ can\ be\n\ explained\ by\ newGuess\ being\ the\ secret\ word.\ That\ is,\ newGuess\ should\ not\n\ contradict\ results\ from\ previous\ guesses.\n\ \n\ For\ example,\ suppose\ we\ have\ previousGuess\="dxaxx"\ and\ the\ result\="*_.__",\n\ then\ newGuess\="dairy"\ or\ newGuess\="dzzza"\ would\ return\ true,\ but\n\ newGuess\="testa"\ or\ newGuess\="dxiry"\ would\ be\ false.\n\ This\ is\ because\ only\ newGuess\="dairy"\ or\ newGuess\="dzzza"\ could\ have\ been\ the\ secret\ word\n\ for\ previousGuess\="dxaxx"\ to\ get\ result\="*_.__"\n\ \n\ HINT\:\ Can\ you\ use\ a\ new\ WordleGame(...)\ somehow?\n
comment4.params=result
comment4.target=boolean\ isAllStars(java.lang.String)
comment4.text=\n\ Returns\ true\ if\ result\ contains\ only\ '*'\ characters\n\ and\ false\ if\ it\ contains\ a\ non-'*'\ character.\n
comment5.params=dictionary\ game
comment5.target=java.util.ArrayList\ findWord(WordleDictionary,\ WordleGame)
comment5.text=\n\ This\ method\ runs\ the\ AI\ algorithm.\n\ Given\ a\ dictionary\ and\ a\ game,\ makes\ a\ series\ of\ calls\ to\ game.guessWord(word)\n\ to\ find\ the\ secret\ word\ in\ game.\n\ Returns\ an\ ArrayList\ containing\ the\ words\ in\ the\ order\ they\ were\ guessed.\n\ If\ the\ secret\ word\ could\ not\ be\ found,\ returns\ null.\n\ \n\ The\ AI\ algorithm\ is\ very\ specific\!\n\ It\ uses\ a\ simple\ strategy\ similar\ to\ one\ you\ may\ have\ used\ when\ playing\ Wordle.\n\ \n\ The\ AI\ starts\ by\ guessing\ the\ the\ lexicographicaly\ smallest\ word.\n\ \n\ Then,\ for\ every\ guess\ after\ that,\ the\ AI\ guesses\ a\ word\ that\ does\ not\ contradict\ any\ previous\n\ results\ it\ has\ seen.\ That\ is,\ it\ makes\ guesses\ that\ are\ consistent\ (see\ isConsistent)\n\ with\ all\ guesses\ made\ so\ far.\n\ \n\ If\ there\ are\ multiple\ possible\ guesses\ that\ are\ consistent,\ then\ the\ AI\n\ will\ pick\ the\ lexicographically\ smallest\ option.\n\ \n\ WordleGame\ has\ been\ modified\ to\ only\ allow\ 6\ guesses.\ After\ this,\ it\ will\ return\ an\n\ empty\ string\ "".\n\ \n\ If\ the\ game\ ends\ because\ the\ AI\ has\ run\ out\ of\ guesses,\ then\ findWord\ returns\ null.\n\ Otherwise,\ findWord\ returns\ once\ it\ has\ made\ a\ correct\ guess.\ This\ can\n\ be\ checked\ using\ the\ isAllStars\ method\ above.\ In\ this\ case,\ a\ list\ of\ the\ AI's\n\ guesses\ in\ the\ order\ they\ were\ made\ is\ returned.\n\ \n\ HINT\ 1\:\ You\ will\ almost\ certainly\ need\ to\ read\ the\ unit\ test\ and\ use\ the\ debugger\ for\ this\ method.\n\ HINT\ 2\:\ See\ Collections.sort\ in\ the\ Java\ class\ libraries\ for\ lexicographical\ ordering.\n
numComments=6
