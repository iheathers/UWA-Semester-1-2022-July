#BlueJ class context
comment0.target=WordleAIAnalyser
comment0.text=\n\ Analyses\ a\ WordleAI\ by\ running\ experiments\ and\ computing\ statistics.\n\ \n\ @author\ 23771397\ (Pritam\ Suwal\ Shrestha)\ AND\ 23728208\ (Trieu\ Huynh)\n
comment1.params=dictionary\ wordLength
comment1.target=WordleAIAnalyser(WordleDictionary,\ int)
comment1.text=\n\ Constructor\ takes\ a\ dictionary\ and\ word\ length\ to\ run\ experiments\ with.\n
comment10.params=bucketSize
comment10.target=void\ printHistogram(int)
comment10.text=\n\ Prints\ the\ string\ made\ by\ makeHistogram(bucketSize)\n\ \n\ The\ following\ code\:\n\ WordleAIAnalyser\ analyser\ \=\ new\ WordleAIAnalyser(new\ WordleDictionary(),\ 5);\n\ analyser.runExperimentsWithAllWords();\n\ analyser.printHistogram(50);\n\ \n\ \n\ Should\ print\ this\ to\ the\ terminal\:\n\ ...*...\n\ ...*...\n\ ...*...\n\ ..**...\n\ ..**...\n\ ..***..\n\ ..***..\n\ ..***..\n\ ..***..\n\ .*****.\n
comment2.params=
comment2.target=java.util.ArrayList\ getExperimentResults()
comment2.text=\n\ \!\!\!\ DO\ NOT\ MODIFY\ \!\!\!\n\ This\ method\ has\ been\ implemented\ for\ you.\n
comment3.params=word
comment3.target=void\ runExperiment(java.lang.String)
comment3.text=\n\ Runs\ an\ experiment\ on\ a\ word\ and\ stores\ the\ result\ in\ experimentResults.\n\ An\ experiment\ is\ the\ WordleExperimentResult\ from\ using\ the\ WordleAI\ on\ a\n\ WordleGame\n\ with\ word\ as\ the\ secret\ word.\n\ \n\ No\ checks\ or\ guards\ are\ needed\ on\ the\ word\ parameter.\n\ It\ is\ always\ assumed\ to\ be\ the\ right\ length\ and\ to\ come\ from\ the\ dictionary.\n
comment4.params=
comment4.target=void\ runExperimentsWithAllWords()
comment4.text=\n\ Runs\ and\ stores\ experiments\ for\ each\ word\ in\ the\ dictionary\ with\ the\ right\n\ length.\n\ \n\ Should\ call\ runExperiment\ once\ for\ each\ word.\n
comment5.params=start\ finish
comment5.target=void\ runExperimentsWithWordsBetween(java.lang.String,\ java.lang.String)
comment5.text=\n\ Runs\ and\ stores\ experiments\ for\ each\ word\ in\ the\ dictionary\ with\ the\ right\n\ length.\n\ \n\ Only\ uses\ words\ that\ are\ lexicographically\ between\ the\ start\ and\ finish.\n\ A\ word\ is\ only\ used\ if\ it\ is\ the\ same\ as\ start\ or\ comes\ after\ AND\ it\ is\ the\n\ same\ as\ finish\ or\ comes\ before.\n\ \n\ For\ example,\ if\ our\ words\ are\ "act",\ "bat",\ "bet",\ "cat"\n\ Then\ runExperimentsWithWordsBetween("baa",\ "caa")\n\ would\ only\ run\ experiments\ for\ "bat"\ and\ "bet"\n\ \n\ Should\ call\ runExperiment\ once\ for\ each\ word.\n\ \n\ HINT\:\ Recall\ the\ String\ compareTo\ method.\n
comment6.params=
comment6.target=java.util.ArrayList\ getUnsolvedWords()
comment6.text=\n\ Returns\ a\ list\ of\ all\ experiment\ words\ that\ were\ not\ solved\ by\ WordleAI.\n\ The\ returned\ list\ of\ words\ should\ be\ in\ lexicographic\ order.\n\ \n\ There\ may\ be\ duplicates\ in\ experimentResults.\n\ This\ method\ should\ NOT\ return\ any\ duplicated\ words\!\n\ \n\ HINT\ 1\:\ Remeber\ that\ findWord\ returns\ null\ when\ it\ cannot\ solve\ the\ word.\n\ HINT\ 2\:\ See\ Collections.sort\ and\ the\ ArrayList\ contains\ method.\n
comment7.params=
comment7.target=int[]\ getGuessLetterFrequency()
comment7.text=\n\ Returns\ an\ array\ with\ length\ 26.\n\ The\ entry\ at\ index\ [0]\ is\ the\ number\ of\ 'a'\ characters\ guessed\ over\ all\n\ experiments\ by\ WordleAI.\n\ The\ entry\ at\ index\ [1]\ is\ the\ number\ of\ 'b'\ characters.\n\ ...\n\ The\ entry\ at\ index\ [25]\ is\ the\ number\ of\ 'z'\ characters.\n\ \n\ For\ example,\ if\ the\ WordleAI\ guessed\ the\ words\ "cat"+"hat"\ in\ one\ experiment\n\ and\ "log"+"cat"\ in\ another\:\n\ The\ return\ array\ would\ be\ {3,\ 0,\ 2,\ ...\ }\n\ Which\ means\ 3\ 'a'\ characters,\ 0\ 'b'\ characters,\ 2\ 'c'\ characters,\ and\ so\n\ on...\n\ \n\ HINT\:\ Unsolved\ words\ have\ no\ guesses\ and\ should\ be\ skipped.\n
comment8.params=
comment8.target=int[]\ getNumGuessesFrequency()
comment8.text=\n\ Returns\ an\ array\ of\ length\ 7.\n\ \n\ The\ entry\ at\ index\ [0]\ is\ the\ number\ of\ times\ the\ WordleAI\ guessed\ a\ word\n\ correctly\ after\ 1\ guess.\n\ The\ entry\ at\ index\ [1]\ is\ the\ number\ of\ times\ exactly\ 2\ guesses\ were\ needed.\n\ and\ so\ on.\n\ The\ entry\ at\ index\ [6]\ is\ the\ number\ of\ times\ the\ WordleAI\ did\ not\ correctly\n\ guess\ the\ word.\n
comment9.params=bucketSize
comment9.target=java.lang.String\ makeHistogram(int)
comment9.text=\n\ Makes\ a\ string\ containing\ a\ histogram\ picture\ of\ getNumGuessesFrequency().\n\ \n\ A\ possible\ histogram\ might\ look\ like\ this\:\n\ ..*....\n\ ..*..*.\n\ .**.**.\n\ .*****.\n\ ******.\n\n\ The\ stars\ form\ bars\ in\ a\ histogram,\ and\ the\ dots\ represent\ empty\ space.\n\ This\ would\ correspond\ to\ a\ frequency\ table\ of\ {1,\ 3,\ 5,\ 2,\ 3,\ 4,\ 0}\n\ Recall\ that\ the\ newline\ '\\n'\ character\ can\ be\ used\ to\ encode\ a\ line\ break\ in\n\ a\ string.\n\ Note\ that\ return\ string\ should\ end\ with\ a\ newline\ '\\n'\ character.\n\ \n\ Because\ the\ numbers\ can\ be\ large,\ we\ use\ a\ bucketSize.\n\ The\ height\ of\ a\ bar\ in\ the\ chart\ is\ 0\ if\ the\ corresponding\ number\ is\ in\ the\n\ inclusive\ range\ from\ 0\ to\ bucketSize-1\n\ The\ height\ is\ 1\ if\ the\ number\ is\ in\ the\ inclusive\ range\ from\ bucketSize\ to\n\ bucketSize*2-1\n\ The\ height\ is\ 2\ if\ the\ number\ is\ in\ the\ inclusive\ range\ from\ bucketSize*2\ to\n\ bucketSize*3-1\n\ ...and\ so\ on.\n\ \n\ The\ height\ of\ the\ histogram\ should\ be\ the\ same\ as\ the\ height\ of\ the\ tallest\n\ bar.\n\ \n
numComments=11
